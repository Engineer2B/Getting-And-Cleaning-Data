list("\\("," of "),
list("\\,"," and "),
list("\\)",""),
list("\\)",""))
lsAx1strFeaturesChanged<-replaceByRules(lsAx1strFeatures1,lsAx2strListOfRules)
# Add subject and activity to feature labels
lsAx1strFeaturesFinal <- append(lsAx1strFeaturesChanged,c("subject","activity"))
# Set the names
names(dfXSYTest) <- lsAx1strFeaturesFinal
names(dfXSYTrain) <- lsAx1strFeaturesFinal
lsAx1strFeaturesFinal
setwd(strPathData)
dfLabels <- read.table("activity_labels.txt")
dfLabels["V2"] <- tolowercase(dfLabels["V2"])
dfLabels
dfLabels["V2"] <- tolower(dfLabels["V2"])
dfLabels
dfLabels["V2"] <- tolower(as.character(dfLabels["V2"]))
dfLabels
dfLabels["V2"] <- tolower(as.character(unlist(dfLabels["V2"])))
dfLabels
dfLabels["V2"] <- tolower(levels(dfLabels["V2"]))
dfLabels
levels(dfLabels["V2"])
droplevels(dfLabels["V2"])
dfLabels <- read.table("activity_labels.txt",stringsAsFactors=FALSE)
dfLabels["V2"] <- tolower(as.character(unlist(dfLabels["V2"])))
dfLabels
gsub("([a-z])([A-Z])", "\\1 \\L\\2", dfLabels["V2"], perl = TRUE)
gsub("([a-z])([A-Z])", "\\1_\\L\\2", dfLabels["V2"], perl = TRUE)
gsub("([a-z])_([A-Z])", "\\1 \\L\\2", dfLabels["V2"], perl = TRUE)
sub("_","", dfLabels["V2"], perl = TRUE)
dfLabels["V2"]
sub("_","", dfLabels["V2"])
sub("_","", unlist(dfLabels["V2"]))
sub("_"," ", unlist(dfLabels["V2"]))
dfLabels["V2"] <- sub("_"," ", unlist(dfLabels["V2"]))
dfLabels
head(dfXSYTest)
head(dfSTest)
factor(dfLabels["V1"],labels=dfLabels["V2"])
factor(unlist(dfLabels["V1"]),labels=unlist(dfLabels["V2"]))
factor(dfLabels["V1"],labels=unlist(dfLabels["V2"]))
dfLabels["V1"]
type(dfLabels["V1"])
typeof(dfLabels["V1"])
dfLabels$"V1"]
dfLabels$"V1"
factor(dfLabels$"V1",labels=unlist(dfLabels["V2"]))
wat<-c(1,2,3,4)
levels(wat)<-factor(dfLabels$"V1",labels=unlist(dfLabels["V2"]))
wat
factor(wat)<-factor(dfLabels$"V1",labels=unlist(dfLabels["V2"]))
wat
wat<-c(1,2,3,4)
factor(wat,labels=unlist(dfLabels["V2"]))
setwd(strPathData)
dfLabels <- read.table("activity_labels.txt",stringsAsFactors=FALSE)
ls6strLabels <- tolower(as.character(unlist(dfLabels["V2"])))
ls6strLabels <- sub("_"," ", unlist(ls6strLabels))
dfXSYTest
factor(dfSTest["V1"])
typeof(dfSTest["V1"])
factor(unlist(dfSTest["V1"]))
# Import activities and replace them by factors
#Set working directory to the test data path
setwd(paste(strPathData,strPathTest,sep=""))
#Read the activity test data
dfYTest<-read.table("y_test.txt")
#Set working directory to the train data path
setwd(paste(strPathData,strPathTrain,sep=""))
#Read the activity train data
dfYTrain<-read.table("y_train.txt")
factor(unlist(dfYTest["V1"]))
factor(unlist(dfYTest["V1"]),labels=ls6strLabels)
tail(dfYTest["V1"])
tail(factor(unlist(dfYTest["V1"]),labels=ls6strLabels))
head(dfYTest["V1"])
head(factor(unlist(dfYTest["V1"]),labels=ls6strLabels))
head(dfYTest)
factor(dfYTest$"V1",labels=ls6strLabels)
factor(unlist(dfYTest["V1"]),labels=ls6strLabels)
setwd(paste(strPathData,strPathTest,sep=""))
#Read the activity test data
dfYTest<-read.table("y_test.txt")
#Set working directory to the train data path
setwd(paste(strPathData,strPathTrain,sep=""))
#Read the activity train data
dfYTrain<-read.table("y_train.txt")
# Import activities and replace them by factors
#Set working directory to the test data path
setwd(paste(strPathData,strPathTest,sep=""))
#Read the activity test data
dfYTest<-read.table("y_test.txt")
#Set working directory to the train data path
setwd(paste(strPathData,strPathTrain,sep=""))
#Read the activity train data
dfYTrain<-read.table("y_train.txt")
dfYTestLabeled<-factor(unlist(dfYTest["V1"]),labels=ls6strLabels)
dfYTrainLabeled<-factor(unlist(dfYTrain["V1"]),labels=ls6strLabels)
#Column bind the subject and activity data for the test set
dfXSTest<-cbind(dfXTest,dfSTest)
dfXSYTest<-cbind(dfXSTest,dfYTestLabeled)
# Column bind the subject and activity data for the train set
dfXSTrain<-cbind(dfXTrain,dfSTrain)
dfXSYTrain<-cbind(dfXSTrain,dfYTrainLabeled)
# Finally row bind the train and test set into 1 big dataframe
dfXSYTrainTest<-rbind(dfXSYTrain,dfXSYTest)
head(dfXSYTrain)
strPathData <- "C:\\Users\\Boris Breuer\\Dropbox\\Code\\Bronbestanden\\Getting and Cleaning Data\\UCI HAR Dataset\\"
strPathTest <- "test"
strPathTrain <- "train"
############################## Step 1 ##############################
## Merging the training and the test sets to create one data set. ##
#Read in the source files
# Set working directory to the test data path
setwd(paste(strPathData,strPathTest,sep=""))
# Read the X, y and subject test data
dfXTest<-read.table("X_test.txt")
dfYTest<-read.table("y_test.txt")
dfSTest<-read.table("subject_test.txt")
# Set working directory to the train data path
setwd(paste(strPathData,strPathTrain,sep=""))
# Read the X, y and subject train data
dfXTrain<-read.table("X_train.txt")
dfYTrain<-read.table("y_train.txt")
dfSTrain<-read.table("subject_train.txt")
#Column bind the subject and activity data for the test set
dfXSTest<-cbind(dfXTest,dfSTest)
dfXSYTest<-cbind(dfXSTest,dfYTest)
# Column bind the subject and activity data for the train set
dfXSTrain<-cbind(dfXTrain,dfSTrain)
dfXSYTrain<-cbind(dfXSTrain,dfYTrain)
# Finally row bind the train and test set into 1 big dataframe
dfXSYTrainTest<-rbind(dfXSYTrain,dfXSYTest)
names(dfXSYTrainTest) <- lsAx1strFeaturesFinal
dfXSYTrainTest$activity<-factor(unlist(dfXSYTrainTest$activity),labels=ls6strLabels)
head(dfXSYTrainTest$activity)
head(dfXSYTrainTest)
head(dfXSYTrainTest$mean)
head(dfXSYTrainTest[,c(mean)]
]
head(dfXSYTrainTest[,c("mean")]
)
head(dfXSYTrainTest[,c(mean)])
grep("mean",names(dfXSYTrainTest))
lsAx2strListOfRules<-list(
list("acc","acceleration"),
list("t ","time duration for "),
list("f ","frequency domain signal for "),
list("mag","magnitude"),
list("iqr","interquartile range"),
list("arCoeff","autorregresion coefficients"),
list("ar coeff","autorregresion coefficients"),
list("sma","signal magnitude area"),
list("mad","median absolute deviation"),
list("maxInds","index of frequency component with largest magnitude"),
list("bandsEnergy","energy of frequency interval"),
list("mean freq","mean of frequency components"),
list("meanFreq","mean of frequency components"),
list("max inds","index of frequency component with largest magnitude"),
#    list("std","standard deviation"),
list("\\(\\)\\-"," in "),
list("\\(\\)",""),
list("\\-"," applied to "),
list("\\("," of "),
list("\\,"," and "),
list("\\)",""),
list("\\)",""))
lsAx1strFeaturesChanged<-replaceByRules(lsAx1strFeatures1,lsAx2strListOfRules)
# Add subject and activity to feature labels
lsAx1strFeaturesFinal <- append(lsAx1strFeaturesChanged,c("subject","activity"))
# Set the names
names(dfXSYTrainTest) <- lsAx1strFeaturesFinal
grep("mean",names(dfXSYTrainTest))
grep("std")
grep("std",names(dfXSYTrainTest))
c(grep("mean",names(dfXSYTrainTest)),grep("std",names(dfXSYTrainTest)))
typeof(c(grep("mean",names(dfXSYTrainTest)),grep("std",names(dfXSYTrainTest))))
dfXSYTrainTest[,c(lsAinExtractionIndices,"subject","activity")]
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),grep("std",names(dfXSYTrainTest)))
# Use the list of indices to extract the relevant columns and the subject
# and activity.
dfXSYTrainTest[,c(lsAinExtractionIndices,"subject","activity")]
grep("subject",names(dfXSYTrainTest))
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),
grep("std",names(dfXSYTrainTest)),
grep("subject",names(dfXSYTrainTest)),
grep("activity",names(dfXSYTrainTest)))
# Use the list of indices to extract the relevant columns and the subject
# and activity.
dfXSYTrainTest[,lsAinExtractionIndices]
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
head(dfXSYTrainTestSelection)
names(dfXSYTrainTestSelection)
strPathData <- "C:\\Users\\Boris Breuer\\Dropbox\\Code\\Bronbestanden\\Getting and Cleaning Data\\UCI HAR Dataset\\"
strPathTest <- "test"
strPathTrain <- "train"
################################## Step 1 ##################################
## Merge the training and the test sets to create one data set.           ##
#Read in the source files
# Set working directory to the test data path
setwd(paste(strPathData,strPathTest,sep=""))
# Read the X, y and subject test data
dfXTest<-read.table("X_test.txt")
dfYTest<-read.table("y_test.txt")
dfSTest<-read.table("subject_test.txt")
# Set working directory to the train data path
setwd(paste(strPathData,strPathTrain,sep=""))
# Read the X, y and subject train data
dfXTrain<-read.table("X_train.txt")
dfYTrain<-read.table("y_train.txt")
dfSTrain<-read.table("subject_train.txt")
#Column bind the subject and activity data for the test set
dfXSTest<-cbind(dfXTest,dfSTest)
dfXSYTest<-cbind(dfXSTest,dfYTest)
# Column bind the subject and activity data for the train set
dfXSTrain<-cbind(dfXTrain,dfSTrain)
dfXSYTrain<-cbind(dfXSTrain,dfYTrain)
# Finally row bind the train and test set into 1 big dataframe
dfXSYTrainTest<-rbind(dfXSYTrain,dfXSYTest)
################################## Step 2 ##################################
## Label the data set with descriptive variable names.                    ##
# Set working directory to the initial data source path
setwd(strPathData)
# Extract variable names from 'features.txt'
tabFeatures <- read.table("features.txt")
# Convert this dataframe into lists of lower case characters
lsAx1strFeatures <- as.character(unlist(tabFeatures[,2]))
# Substitute some characters with their more readable equivalent
#Replace CamelCase with spaces as in
#http://stackoverflow.com/a/22528880/1750173
lsAx1strFeatures1 <- gsub("([a-z])([A-Z])", "\\1 \\L\\2", lsAx1strFeatures, perl = TRUE)
#sub("^(.[a-z])", "\\L\\1", lsAx1strFeatures1, perl = TRUE)
### Replacing words to make it more readable ###
replaceByRules <- function(lsAx1strInput,lsAx2strRules){
# This function substitutes strings in sequence, element 1 is the pattern
# string, element 2 is the replacement string
for(ls1x2str in lsAx2strRules){
strPattern<-ls1x2str[[1]]
strReplacement<-ls1x2str[[2]]
lsAx1strInput<-sub(strPattern,strReplacement,lsAx1strInput)
}
return(lsAx1strInput)
}
lsAx2strListOfRules<-list(
list("acc","acceleration"),
list("t ","time duration for "),
list("f ","frequency domain signal for "),
list("mag","magnitude"),
list("iqr","interquartile range"),
list("arCoeff","autorregresion coefficients"),
list("ar coeff","autorregresion coefficients"),
list("sma","signal magnitude area"),
list("mad","median absolute deviation"),
list("maxInds","index of frequency component with largest magnitude"),
list("bandsEnergy","energy of frequency interval"),
list("mean freq","mean of frequency components"),
list("meanFreq","mean of frequency components"),
list("max inds","index of frequency component with largest magnitude"),
#    list("std","standard deviation"),
list("\\(\\)\\-"," in "),
list("\\(\\)",""),
list("\\-"," plugged into "),
list("\\("," of "),
list("\\,"," and "),
list("\\)",""),
list("\\)",""))
lsAx1strFeaturesChanged<-replaceByRules(lsAx1strFeatures1,lsAx2strListOfRules)
# Add subject and activity to feature labels
lsAx1strFeaturesFinal <- append(lsAx1strFeaturesChanged,c("subject","activity"))
# Set the names
names(dfXSYTrainTest) <- lsAx1strFeaturesFinal
################################## Step 3 ##################################
## Uses descriptive activity names to name the activities in the data set ##
setwd(strPathData)
dfLabels <- read.table("activity_labels.txt",stringsAsFactors=FALSE)
ls6strLabels <- tolower(as.character(unlist(dfLabels["V2"])))
ls6strLabels <- sub("_"," ", unlist(ls6strLabels))
# Applying labels to activity column
dfXSYTrainTest$activity<-factor(unlist(dfXSYTrainTest$activity),labels=ls6strLabels)
################################## Step 4 ##################################
## Extract only those measurements on the mean and standard deviation     ##
## for each measurement.                                                  ##
# List the indices of the labels of dfXSYTrainTest that have 'subject',
# 'activity', 'mean' or 'std' in them.
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),
grep("std",names(dfXSYTrainTest)),
grep("subject",names(dfXSYTrainTest)),
grep("activity",names(dfXSYTrainTest)))
# Use the list of indices to extract the relevant columns and the subject
# and activity.
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
################################## Step 5 ##################################
## From the data set in step 4, create a second, independent tidy data    ##
## set with the average of each variable for each activity                ##
## and each subject.                                                      ##
names(dfXSYTrainTestSelection)
tapply(dfXSYTrainTestSelection$subject,dfXSYTrainTestSelection$activity,mean)
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c("activity", "subject"),
summarise,
mean)
library(plyr)
# Run the functions length, mean, and sd on the value of "change" for each
# group, broken down by sex + condition
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c("activity", "subject"),
summarise,
mean)
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c("activity", "subject"),
summarize,
mean)
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c("activity", "subject"),
colwise(mean))
dfXSYTrainTestSummary
head(dfXSYTrainTestSummary)
head(dfXSYTrainTestSummary[,c(1,2,3)])
names(dfXSYTrainTestSummary)
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
lsAinExtractionIndices,
colwise(mean))
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
names(dfXSYTrainTestSelection),
colwise(mean))
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c(names(dfXSYTrainTestSelection)),
colwise(mean))
names(dfXSYTrainTestSelection)
unlisted(names(dfXSYTrainTestSelection))
unlist(names(dfXSYTrainTestSelection))
c(unlist(names(dfXSYTrainTestSelection)))
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c(unlist(names(dfXSYTrainTestSelection))),
colwise(mean))
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c("activity", "subject"),
colwise(mean))
dim(dfXSYTrainTestSummary)
################################## Step 4 ##################################
## Extract only those measurements on the mean and standard deviation     ##
## for each measurement.                                                  ##
# List the indices of the labels of dfXSYTrainTest that have 'subject',
# 'activity', 'mean' or 'std' in them.
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),
grep("std",names(dfXSYTrainTest)),
grep("subject",names(dfXSYTrainTest)),
grep("activity",names(dfXSYTrainTest)))
# Use the list of indices to extract the relevant columns and the subject
# and activity.
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
dim(dfXSYTrainTestSelection)
strPathData <- "C:\\Users\\Boris Breuer\\Dropbox\\Code\\Bronbestanden\\Getting and Cleaning Data\\UCI HAR Dataset\\"
strPathTest <- "test"
strPathTrain <- "train"
################################## Step 1 ##################################
## Merge the training and the test sets to create one data set.           ##
#Read in the source files
# Set working directory to the test data path
setwd(paste(strPathData,strPathTest,sep=""))
# Read the X, y and subject test data
dfXTest<-read.table("X_test.txt")
dfYTest<-read.table("y_test.txt")
dfSTest<-read.table("subject_test.txt")
# Set working directory to the train data path
setwd(paste(strPathData,strPathTrain,sep=""))
# Read the X, y and subject train data
dfXTrain<-read.table("X_train.txt")
dfYTrain<-read.table("y_train.txt")
dfSTrain<-read.table("subject_train.txt")
#Column bind the subject and activity data for the test set
dfXSTest<-cbind(dfXTest,dfSTest)
dfXSYTest<-cbind(dfXSTest,dfYTest)
# Column bind the subject and activity data for the train set
dfXSTrain<-cbind(dfXTrain,dfSTrain)
dfXSYTrain<-cbind(dfXSTrain,dfYTrain)
# Finally row bind the train and test set into 1 big dataframe
dfXSYTrainTest<-rbind(dfXSYTrain,dfXSYTest)
################################## Step 2 ##################################
## Label the data set with descriptive variable names.                    ##
# Set working directory to the initial data source path
setwd(strPathData)
# Extract variable names from 'features.txt'
tabFeatures <- read.table("features.txt")
# Convert this dataframe into lists of lower case characters
lsAx1strFeatures <- as.character(unlist(tabFeatures[,2]))
# Substitute some characters with their more readable equivalent
#Replace CamelCase with spaces as in
#http://stackoverflow.com/a/22528880/1750173
lsAx1strFeatures1 <- gsub("([a-z])([A-Z])", "\\1 \\L\\2", lsAx1strFeatures, perl = TRUE)
#sub("^(.[a-z])", "\\L\\1", lsAx1strFeatures1, perl = TRUE)
### Replacing words to make it more readable ###
replaceByRules <- function(lsAx1strInput,lsAx2strRules){
# This function substitutes strings in sequence, element 1 is the pattern
# string, element 2 is the replacement string
for(ls1x2str in lsAx2strRules){
strPattern<-ls1x2str[[1]]
strReplacement<-ls1x2str[[2]]
lsAx1strInput<-sub(strPattern,strReplacement,lsAx1strInput)
}
return(lsAx1strInput)
}
lsAx2strListOfRules<-list(
list("acc","acceleration"),
list("t ","time duration for "),
list("f ","frequency domain signal for "),
list("mag","magnitude"),
list("iqr","interquartile range"),
list("arCoeff","autorregresion coefficients"),
list("ar coeff","autorregresion coefficients"),
list("sma","signal magnitude area"),
list("mad","median absolute deviation"),
list("maxInds","index of frequency component with largest magnitude"),
list("bandsEnergy","energy of frequency interval"),
list("mean freq","mean of frequency components"),
list("meanFreq","mean of frequency components"),
list("max inds","index of frequency component with largest magnitude"),
#    list("std","standard deviation"),
list("\\(\\)\\-"," in "),
list("\\(\\)",""),
list("\\-"," plugged into "),
list("\\("," of "),
list("\\,"," and "),
list("\\)",""),
list("\\)",""))
lsAx1strFeaturesChanged<-replaceByRules(lsAx1strFeatures1,lsAx2strListOfRules)
# Add subject and activity to feature labels
lsAx1strFeaturesFinal <- append(lsAx1strFeaturesChanged,c("subject","activity"))
# Set the names
names(dfXSYTrainTest) <- lsAx1strFeaturesFinal
################################## Step 3 ##################################
## Uses descriptive activity names to name the activities in the data set ##
setwd(strPathData)
dfLabels <- read.table("activity_labels.txt",stringsAsFactors=FALSE)
ls6strLabels <- tolower(as.character(unlist(dfLabels["V2"])))
ls6strLabels <- sub("_"," ", unlist(ls6strLabels))
# Applying labels to activity column
dfXSYTrainTest$activity<-factor(unlist(dfXSYTrainTest$activity),labels=ls6strLabels)
################################## Step 4 ##################################
## Extract only those measurements on the mean and standard deviation     ##
## for each measurement.                                                  ##
# List the indices of the labels of dfXSYTrainTest that have 'subject',
# 'activity', 'mean' or 'std' in them.
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),
grep("std",names(dfXSYTrainTest)),
grep("subject",names(dfXSYTrainTest)),
grep("activity",names(dfXSYTrainTest)))
# Use the list of indices to extract the relevant columns and the subject
# and activity.
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
################################## Step 5 ##################################
## From the data set in step 4, create a second, independent tidy data    ##
## set with the average of each variable for each activity                ##
## and each subject.                                                      ##
names(dfXSYTrainTestSelection)
library(plyr)
# Run the functions length, mean, and sd on the value of "change" for each
# group, broken down by sex + condition
dfXSYTrainTestSummary <- ddply(dfXSYTrainTestSelection,
c("activity", "subject"),
colwise(mean))
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),
grep("deviation",names(dfXSYTrainTest)),
grep("subject",names(dfXSYTrainTest)),
grep("activity",names(dfXSYTrainTest)))
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
dim(dfXSYTrainTestSelection)
################################## Step 4 ##################################
## Extract only those measurements on the mean and standard deviation     ##
## for each measurement.                                                  ##
# List the indices of the labels of dfXSYTrainTest that have 'subject',
# 'activity', 'mean' or 'deviation' in them.
lsAinExtractionIndices = c(grep("mean",names(dfXSYTrainTest)),
grep("deviation",names(dfXSYTrainTest)),
grep("subject",names(dfXSYTrainTest)),
grep("activity",names(dfXSYTrainTest)))
# Use the list of indices to extract the relevant columns and the subject
# and activity.
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
##############################  Export result ##############################
strFileOutStep4 <- paste(strPathData,strNameFileOutStep4,sep="")
write.table(dfXSYTrainTestSelection,file=strFileOutStep5,row.name=FALSE)
strNameFileOutStep4 <- "step4.txt"
strNameFileOutStep5 <- "step5.txt"
strFileOutStep4 <- paste(strPathData,strNameFileOutStep4,sep="")
write.table(dfXSYTrainTestSelection,file=strFileOutStep5,row.name=FALSE)
strFileOutStep4 <- paste(strPathData,strNameFileOutStep4,sep="")
write.table(dfXSYTrainTestSelection,file=strFileOutStep4,row.name=FALSE)
strFileOutStep5 <- paste(strPathData,strNameFileOutStep5,sep="")
write.table(dfXSYTrainTestSummary,file=strFileOutStep5,row.name=FALSE)
grep("mean|deviation|subject|activity",names(dfXSYTrainTest)
)
lsAinExtractionIndices = grep("mean|deviation|subject|activity",names(dfXSYTrainTest))
dfXSYTrainTestSelection <- dfXSYTrainTest[,lsAinExtractionIndices]
dim(dfXSYTrainTestSelection)
source('run_analysis.R')
setwd("C:\\Programmeren\\workspace\\GitHub\\Getting-And-Cleaning-Data")
source('run_analysis.R')
run_analysis
run_analysis
run_analysis()
source('run_analysis.R')
getwd()
setwd("C:\\Programmeren\\workspace\\GitHub\\Getting-And-Cleaning-Data")
source('run_analysis.R')
run_analysis()
message(paste("Great success, file written to '",strFileOutStep5,"'!"))
message(paste("Great success, file written to '",strFileOutStep5,"'!",sep=""))
message(paste("Great success!!\nFile written to '",strFileOutStep5,"'.",sep=""))
message(paste("Great success!!\nFile written to:\n'",strFileOutStep5,"'.",sep=""))
